#!/usr/bin/env bash

set \
    -o errexit \
    -o nounset \
    -o pipefail

# required environment variables
: ${ASDF_INSTALL_TYPE?}
: ${ASDF_INSTALL_VERSION?}
: ${ASDF_INSTALL_PATH?}

readonly repository="kubernetes/kubernetes"
readonly toolname="kubeadm"

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_${toolname}_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install() {
    local -r install_type="$1"
    local -r version="$2"
    local -r install_path="$3"

    local -r bin_install_path="${install_path}/bin"
    local -r download_url="$(get_download_url "${version}")"
    local -r download_path="${TMP_DOWNLOAD_DIR}/$(basename "${download_url}")"

    echo "Downloading ${toolname} version ${version} from ${download_url}"
    if curl -fsL "${download_url}" -o "${download_path}"; then
        echo "Cleaning ${toolname} previous binaries"
        rm -rf "${bin_install_path}/${toolname}"

        echo "Creating ${toolname} bin directory"
        mkdir -p "${bin_install_path}"

        extracted=
        if [[ $download_path == *.tar.gz ]]; then
            echo "Extracting ${toolname} tar archive"
            tar xvf "${download_path}" --strip-components=1 -C "$bin_install_path" "$(basename -s .tar.gz "$download_path")/server/bin/$toolname" 2> /dev/null
            [ $? -eq 0 ] && extracted=true
        fi
        if [ -z $extracted ]; then
            echo "Error: did not properly extract ${toolname} from archive"
            exit 1
        fi
    else
        echo "Error: ${toolname} version ${version} not found" >&2
        exit 1
    fi
}

get_platform() {
    uname | tr '[:upper:]' '[:lower:]'
}

get_arch() {
    arch="$(uname -m)"
    if [[ $arch == *64 ]]; then
        arch="amd64"
    elif [[ $arch == *86* ]]; then
        arch="386"
    fi
    echo "$arch"
}

get_download_url() {
    local -r version="$1"
    local -r platform="$(get_platform)"
    local -r arch="$(get_arch)"
    echo "https://dl.k8s.io/${version}/kubernetes-server-${platform}-${arch}.tar.gz"
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"